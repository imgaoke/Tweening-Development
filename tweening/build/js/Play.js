var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define(["require", "exports", "Phaser", "./Tween", "./Tweens"], function (require, exports, Phaser, Tween_1, Tweens_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Play = /** @class */ (function (_super) {
        __extends(Play, _super);
        function Play() {
            var _this = _super.call(this, "Play") || this;
            // initial speed
            _this.uSpeed = 0;
            return _this;
        }
        Play.prototype.create = function () {
            console.log("Play.create()");
            this.tw = new Tweens_1.default(this.game);
            this.spriteX = this.add.sprite(160, 120, "playership1").setOrigin(0.5, 0.5).setAlpha(1);
            // Enables movement of player with WASD keys
            this.input.keyboard.on('keydown-ONE', function (event) {
                this.scene.button1();
            });
            this.input.keyboard.on('keydown-TWO', function (event) {
                this.scene.button2();
            });
            this.input.keyboard.on('keydown-THREE', function (event) {
                this.scene.button3();
            });
            this.input.keyboard.on('keydown-FOUR', function (event) {
                this.scene.button4();
            });
            this.input.keyboard.on('keydown-R', function (event) {
                this.scene.restart();
            });
        };
        Play.prototype.update = function (time, delta) {
            this.tw.update(time, delta);
        };
        Play.prototype.button1 = function () {
            // TODO: some showcase on this.spriteX using SmoothStepN on Alpha
            this.spriteX.alpha = 0;
            // smooth step 5 is taken as an example here
            var smoothStep5 = function (t) {
                return Tween_1.default.smoothStepN(t, 5);
            };
            this.tw.tween(this.spriteX, "alpha", 1, true, false, 3, smoothStep5, null, null, null, null, null);
        };
        Play.prototype.button2 = function () {
            // TODO: some showcase on this.spriteX using funky bezier on Alpha, Rotation and Position
            //Alpha
            this.spriteX.alpha = 0;
            this.tw.tween(this.spriteX, "alpha", 1, true, false, 3, Tween_1.default.linearBezier, null, null, null, null, null);
            //Rotation
            this.spriteX.angle = -90;
            this.tw.tween(this.spriteX, "angle", 90, true, false, 5, Tween_1.default.easeInQuadraticBezier, null, null, null, null, null);
            //Position
            this.tw.tween(this.spriteX, "x", 600, true, false, 10, Tween_1.default.easeOutQuadraticBezier, null, null, null, null, null);
            this.tw.tween(this.spriteX, "y", 200, true, false, 10, Tween_1.default.easeOutQuadraticBezier, null, null, null, null, null);
        };
        // random generate spline points starting from the second point
        Play.prototype.generalSplineEndFunction = function (tween) {
            if (tween.target == "x") {
                this.tw.tween(tween.target, tween.property, Math.random() * 600, tween.isEase, tween.isSmoothSpline, 3, tween.func, tween.on_end, null, null, null, null);
            }
            else {
                this.tw.tween(tween.target, tween.property, Math.random() * 440, tween.isEase, tween.isSmoothSpline, 3, tween.func, tween.on_end, null, null, null, null);
            }
        };
        Play.prototype.genericCallback = function (func) {
            var THIS = this;
            function callback(tween) {
                func.call(THIS, tween);
            }
            return callback;
        };
        Play.prototype.button3 = function () {
            // TODO: some showcase on this.spriteX using spline on Beziers utilizing on_end
            // first point on the spline is (600, 40) and the rest points on the spline is randomly generated between (0,0) and (600, 440)
            // curves in the spline is generated by quadratic Bezier curves
            this.tw.tween(this.spriteX, "x", 600, false, false, 3, null, this.genericCallback(this.generalSplineEndFunction), null, null, null, null);
            this.tw.tween(this.spriteX, "y", 40, false, false, 3, null, this.genericCallback(this.generalSplineEndFunction), null, null, null, null);
        };
        Play.prototype.endFunctionForSmoothSpline = function (tween, list) {
            if (tween.property == "x") {
                console.log("here1");
                if (this.firstX == undefined) {
                    this.firstX = list.shift();
                    this.secondX = list.shift();
                    this.thirdX = list.shift();
                }
                else {
                    this.firstX = this.secondX;
                    this.secondX = this.thirdX;
                    this.thirdX = list.shift();
                }
                // the tween is executed until the first and second point is the last two points on the spline
                if (this.firstX != undefined && this.secondX != undefined) {
                    this.tw.tween(tween.target, tween.property, this.secondX, false, true, 3, tween.func, tween.on_end, this.uSpeed, this.firstX, this.secondX, this.thirdX);
                }
                if (this.thirdX != undefined) {
                    this.uSpeed = (this.thirdX - this.firstX) / 2;
                }
            }
            else {
                if (this.firstY == undefined) {
                    this.firstY = list.shift();
                    this.secondY = list.shift();
                    this.thirdY = list.shift();
                }
                else {
                    this.firstY = this.secondY;
                    this.secondY = this.thirdY;
                    this.thirdY = list.shift();
                }
                // the tween is executed until the first and second point is the last two points on the spline
                if (this.firstY != undefined && this.secondY != undefined) {
                    console.log("first:" + this.firstY);
                    console.log("second:" + this.secondY);
                    console.log("third:" + this.thirdY);
                    this.tw.tween(tween.target, tween.property, this.secondY, false, true, 3, tween.func, tween.on_end, this.uSpeed, this.firstY, this.secondY, this.thirdY);
                }
                if (this.thirdY != undefined) {
                    this.uSpeed = (this.thirdX - this.firstX) / 2;
                }
            }
        };
        Play.prototype.genericCallbackWithVarargs = function (func) {
            var list = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                list[_i - 1] = arguments[_i];
            }
            var THIS = this;
            function callback(tween) {
                func.call(THIS, tween, list);
            }
            return callback;
        };
        Play.prototype.button4 = function () {
            // TODO: some showcase some smooth spline movement, change position of this.sprite3
            //       the spline must be built using single line of code, either using varargs
            //       or the Builder pattern
            // the first target position is (0,0) but the time to get there is set to 0 so the first target position is dummy
            // the spline coordiantes will be passed as varargs after the first argument to the function genericCallbackWithVarargs in which the first coordinates is the sprite's current position
            this.tw.tween(this.spriteX, "x", 0, false, false, 0, null, this.genericCallbackWithVarargs(this.endFunctionForSmoothSpline, 160, 400, 500, 40), null, null, null, null);
            this.tw.tween(this.spriteX, "y", 0, false, false, 0, null, this.genericCallbackWithVarargs(this.endFunctionForSmoothSpline, 120, 100, 300, 40), null, null, null, null);
        };
        Play.prototype.restart = function () {
            this.scene.restart();
        };
        return Play;
    }(Phaser.Scene));
    exports.default = Play;
});
//# sourceMappingURL=Play.js.map